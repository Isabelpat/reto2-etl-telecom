# -*- coding: utf-8 -*-
"""TELCOM-alura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iEqGKW2xmD7VSPAHrZRMy9IFFnzClYPV

#EXTRACCION DE DATOS,
bajamos la data del lugar de interes
lo guardamos y subimos a drive
"""



"""#Leemos el documento y nos conectamos a la biblioteca pandas
#creamos el dataframe con una variable
"""

import pandas as pd

df_telcom = pd.read_json('/content/drive/MyDrive/reto2_ecomerce_alura-oracle/TelecomX_Data.json')
df_telcom.head()
#Nos damos cuenta que  costumer, phone, internet, account, tienen información  anidadadatos_telcom =

"""#visualizamos los datos anidados"""

df_telcom.info()
df_telcom.head(4)
df_telcom.columns

df_customer = pd.json_normalize(df_telcom['customer'])
df_phone = pd.json_normalize(df_telcom['phone'])
df_internet = pd.json_normalize(df_telcom['internet'])
df_account = pd.json_normalize(df_telcom['account'])

df_normalizados = pd.concat([df_customer, df_phone, df_internet, df_account], axis=1)
df_normalizados.head()
df_normalizados.info()

#convertimos a numerico
print(df_normalizados.columns.tolist())

df_normalizados.columns = df_normalizados.columns.str.replace('.', '_', regex=False)
df_normalizados.head()

df_normalizados['Charges_Total'] = pd.to_numeric(df_normalizados['Charges_Total'], errors='coerce')
df_normalizados.head()

df_normalizados.shape

"""##vemos si hay duplicados"""

df_normalizados.duplicated().sum()

df_normalizados = df_normalizados.drop_duplicates()



"""#Información de dataframe
sabemos que tenemos 7267 filas y 19 columnas ya desanidando los datos de las columnas : customer,	phone,	internet,	account, y las dos columnas que no tenian información anidad CustomerID y Churn, hay 12 valores nulos en la columna Charges_Total, que aproximadamente representa un 0.15% de los datos, luego checamos duplicados y encontramos que habia 264 por lo que se eliminaron y con ello se fueron los null
"""



"""#Verificamos los null si hay  eliminamos null"""

df_normalizados.isnull().sum()

"""##no hay null pero es posible que lo hubiera cuando los duplicados aun estaban, dejare la forma de eliminar como ejemplo los null
en este caso digamos que los null estaban en esta columna por loque eliminamos y luego verificamos     df_normalizados = df_normalizados.dropna(subset=['Charges_Total'])  verificamos usando df_normalizados['Charges_Total'].isnull().sum()
df_normalizados.shape

"""

print(df_normalizados['Charges_Total'].dtype)

print(df_normalizados['Charges_Monthly'].dtype)

print(df_normalizados['Partner'].value_counts())

print(df_normalizados['Contract'].unique())
#vamos a unificar los formatos de escritura de esta columna

df_normalizados['Contract'] = df_normalizados['Contract'].str.strip().str.lower()

df_normalizados['Contract'] = df_normalizados['Contract'].map({
    'one year': '1 year',
    'month-to-month': 'month-to-month',
    'two year': '2 year'
})

print(df_normalizados['Contract'].unique())
print(df_normalizados['Contract'].value_counts())

print(df_normalizados['InternetService'].unique())

df_normalizados['InternetService'] = df_normalizados['InternetService'].str.strip().str.lower()

df_normalizados['InternetService'] = df_normalizados['InternetService'].map({
    'dsl': 'dsl',
    'fiber optic': 'fiber_optic',
    'no': 'no'
})

print(df_normalizados['InternetService'].unique())
print(df_normalizados['InternetService'].value_counts())

print(df_normalizados['PaymentMethod'].unique())

df_normalizados['PaymentMethod'] = df_normalizados['PaymentMethod'].str.strip().str.lower()

# Limpieza básica (por si hubiera espacios)
df_normalizados['PaymentMethod'] = df_normalizados['PaymentMethod'].str.strip().str.lower()

# Mapear a nombres más cortos
df_normalizados['PaymentMethod'] = df_normalizados['PaymentMethod'].map({
    'mailed check': 'mailed_check',
    'electronic check': 'electronic_check',
    'credit card (automatic)': 'credit_card',
    'bank transfer (automatic)': 'bank_transfer'
})

print(df_normalizados['PaymentMethod'].unique())
print(df_normalizados['PaymentMethod'].value_counts())

"""#Estadistica descriptiva para detectar valores fuera de rango"""

print(df_normalizados.columns.tolist())

cols = df_normalizados.columns.tolist()

replacements = {
    'Seniorcitizen': 'Senior Citizen',
    'Phoneservice': 'Phone Service',
    'Multiplelines': 'Multiple Lines',
    'Internetservice': 'Internet Service',
    'Onlinesecurity': 'Online Security',
    'Onlinebackup': 'Online Backup',
    'Deviceprotection': 'Device Protection',
    'Techsupport': 'Tech Support',
    'Streamingtv': 'Streaming TV',
    'Streamingmovies': 'Streaming Movies',
    'Paperlessbilling': 'Paperless Billing',
    'Paymentmethod': 'Payment Method',
    'Chargesmonthly': 'Charges Monthly',
    'Chargestotal': 'Charges Total'
}

cols_corrected = [replacements.get(c, c) for c in cols]

df_normalizados.columns = cols_corrected

print(df_normalizados.columns.tolist())

"""#Guardaremos los taros impios"""

df_normalizados.to_csv('/content/TelecomX_Data_Limpio.csv', index=False)

#lo descargare a mi maquina
from google.colab import files
files.download('/content/TelecomX_Data_Limpio.csv')

"""# en esta parte cree el repositorio guit guithub"""